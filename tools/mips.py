# source https://psx-spx.consoledev.net/cpuspecifications/
opcodes = {
    0x00: "special",
    0x01: "bcondz",
    0x02: "j",
    0x03: "jal",
    0x04: "beq",
    0x05: "bne",
    0x06: "blez",
    0x07: "bgtz",
    0x08: "addi",
    0x09: "addiu",
    0x0A: "slti",
    0x0B: "sltiu",
    0x0C: "andi",
    0x0D: "ori",
    0x0E: "xori",
    0x0F: "lui",
    0x10: "cop0",
    0x11: "cop1",
    0x12: "cop2",
    0x13: "cop3",
    0x14: "n/a",
    0x15: "n/a",
    0x16: "n/a",
    0x17: "n/a",
    0x18: "n/a",
    0x19: "n/a",
    0x1A: "n/a",
    0x1B: "n/a",
    0x1C: "n/a",
    0x1D: "n/a",
    0x1E: "n/a",
    0x1F: "n/a",
    0x20: "lb",
    0x21: "lh",
    0x22: "lwl",
    0x23: "lw",
    0x24: "lbu",
    0x25: "lhu",
    0x26: "lwr",
    0x27: "n/a",
    0x28: "sb",
    0x29: "sh",
    0x2A: "swl",
    0x2B: "sw",
    0x2C: "n/a",
    0x2D: "n/a",
    0x2E: "swr",
    0x2F: "n/a",
    0x30: "lwc0",
    0x31: "lwc1",
    0x32: "lwc2",
    0x33: "lwc3",
    0x34: "n/a",
    0x35: "n/a",
    0x36: "n/a",
    0x37: "n/a",
    0x38: "swc0",
    0x39: "swc1",
    0x3A: "swc2",
    0x3B: "swc3",
    0x3C: "n/a",
    0x3D: "n/a",
    0x3E: "n/a",
    0x3F: "n/a",
}

secondary_opcodes = {
    0x00: "sll",
    0x01: "n/a",
    0x02: "srl",
    0x03: "sra",
    0x04: "sllv",
    0x05: "n/a",
    0x06: "srlv",
    0x07: "srav",
    0x08: "jr",
    0x09: "jalr",
    0x0A: "n/a",
    0x0B: "n/a",
    0x0C: "syscall",
    0x0D: "break",
    0x0E: "n/a",
    0x0F: "n/a",
    0x10: "mfhi",
    0x11: "mthi",
    0x12: "mflo",
    0x13: "mtlo",
    0x14: "n/a",
    0x15: "n/a",
    0x16: "n/a",
    0x17: "n/a",
    0x18: "mult",
    0x19: "multu",
    0x1A: "div",
    0x1B: "divu",
    0x1C: "n/a",
    0x1D: "n/a",
    0x1E: "n/a",
    0x1F: "n/a",
    0x20: "add",
    0x21: "addu",
    0x22: "sub",
    0x23: "subu",
    0x24: "and",
    0x25: "or",
    0x26: "xor",
    0x27: "nor",
    0x28: "n/a",
    0x29: "n/a",
    0x2A: "slt",
    0x2B: "sltu",
    0x2C: "n/a",
    0x2D: "n/a",
    0x2E: "n/a",
    0x2F: "n/a",
    0x30: "n/a",
    0x31: "n/a",
    0x32: "n/a",
    0x33: "n/a",
    0x34: "n/a",
    0x35: "n/a",
    0x36: "n/a",
    0x37: "n/a",
    0x38: "n/a",
    0x39: "n/a",
    0x3A: "n/a",
    0x3B: "n/a",
    0x3C: "n/a",
    0x3D: "n/a",
    0x3E: "n/a",
    0x3F: "n/a",
}

registers = {
    0:  "zero",
    1:  "at",
    2:  "v0",
    3:  "v1",
    4:  "a0",
    5:  "a1",
    6:  "a2",
    7:  "a3",
    8:  "t0",
    9:  "t1",
    10: "t2",
    11: "t3",
    12: "t4",
    13: "t5",
    14: "t6",
    15: "t7",
    16: "s0",
    17: "s1",
    18: "s2",
    19: "s3",
    20: "s4",
    21: "s5",
    22: "s6",
    23: "s7",
    24: "t8",
    25: "t9",
    26: "k0",
    27: "k1",
    28: "gp",
    29: "sp",
    30: "fp",
    31: "ra",
}

# source: http://www.cburch.com/cs/330/reading/mips-ref.pdf
# r == register, i == immediate, j == jump
encoding_type = {
    "add": "r",
    "sub": "r",
    "addi": "i",
    "addu": "r",
    "subu": "r",
    "addiu": "i",
    "mult": "r",
    "div": "r",
    "multu": "r",
    "divu": "r",
    "mfhi": "r",
    "mflo": "r",
    "and": "r",
    "or": "r",
    "nor": "r",
    "xor": "r",
    "andi": "i",
    "ori": "i",
    "xori": "i",
    "sll": "r",
    "srl": "r",
    "sra": "r",
    "sllv": "r",
    "srlv": "r",
    "srav": "r",
    "slt": "r",
    "sltu": "r",
    "slti": "i",
    "sltiu": "i",
    "j": "j",
    "jal": "j",
    "jr": "r",
    "jalr": "r",
    "beq": "i",
    "bne": "i",
    "syscall": "r",
    "special": "r", # all "special" encodings are really just a variant of register
    "lui": "i",
    "lb": "i",
    "lbu": "i",
    "lh": "i",
    "lhu": "i",
    "lw": "i",
    "sb": "i",
    "sh": "i",
    "sw": "i",
    "ll": "i",
    "sc": "i",
}

# source: http://www.cburch.com/cs/330/reading/mips-ref.pdf
# how to disassemble the register use
register_subtype = {
    "add": "dst", # op rd, rs, rt
    "sub": "dst",
    "addu": "dst",
    "subu": "dst",
    # ----------
    "mult": "st", # op rs, rt
    "div": "st",
    "multu": "st",
    "divu": "st",
    "mfhi": "d", # op rd
    "mflo": "d",
    # ----------
    "and": "dst",
    "or": "dst",
    "nor": "dst",
    "xor": "dst",
    # ----------
    "sll": "dth", # op rd, rt, sh
    "srl": "dth",
    "sra": "dth",
    "sllv": "dts", # op rd, rt, rs
    "srlv": "dts",
    "srav": "dts",
    # ----------
    "slt": "dst",
    "sltu": "dst",
    # ----------
    "jr": "s", # op rs
    "jalr": "s",
    "syscall": "syscall", # a mess
}

immediate_subtype = {
    "addi": "tsi", # op rt, rs, imm
    "addiu": "tsi",
    "andi": "tsi",
    "ori": "tsi",
    "xori": "tsi",
    "slti": "tsi",
    "sltiu": "tsi",
    "beq": "tsi",
    "bne": "tsi",
    "lui": "ti", # op rt, imm
    "lb": "tis", # op rt, imm(rs)
    "lbu": "tis",
    "lh": "tis",
    "lhu": "tis",
    "lw": "tis",
    "sb": "tis",
    "sh": "tis",
    "sw": "tis",
    "ll": "tis",
    "sc": "tis",
}

#TODO(Lazy) special decoding

class MIPS():
    pass
#TODO(Lazy)?