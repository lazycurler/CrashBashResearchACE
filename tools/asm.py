import mips
from dataclasses import dataclass

PRIMARY_OPCODE_BITMASK = 0xFC000000
PRIMARY_OPCODE_START_BIT = 26
RS_BITMASK = 0x03E00000
RS_START_BIT = 21
RT_BITMASK = 0x001F0000
RT_START_BIT = 16
RD_BITMASK = 0x0000F800
RD_START_BIT = 11
SH_BITMASK = 0x000007C0
SH_START_BIT = 6
FUNC_BITMASK = 0x0000003E
FUNC_START_BIT = 0
IMM_BITMASK = 0x0000FFFF
IMM_START_BIT = 0
JUMP_ADDR_MASK = 0x03FFFFFF
JUMP_ADDR_START_BIT = 0

# TODO(Lazy) base class?

class RegisterEncoding():
    def __init__(self, word):
        self.op = (word & PRIMARY_OPCODE_BITMASK) >> PRIMARY_OPCODE_START_BIT
        self.rs = (word & RS_BITMASK) >> RS_START_BIT
        self.rd = (word & RD_BITMASK) >> RD_START_BIT
        self.rt = (word & RT_BITMASK) >> RT_START_BIT
        self.sh = (word & SH_BITMASK) >> SH_START_BIT
        self.func = (word & FUNC_BITMASK) >> FUNC_START_BIT

    def get_op(self):
        if self.op == 0x0: # "special" opcode that needs more decoding
            _op = mips.secondary_opcodes[self.func]
        else:
            _op = mips.opcodes[self.op]
        return _op

    def str_as_dst(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rd]}, {mips.registers[self.rs]}, {mips.registers[self.rt]}"

    def str_as_st(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rs]}, {mips.registers[self.rt]}"

    def str_as_d(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rd]}"

    def str_as_dts(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rd]}, {mips.registers[self.rt]}, {mips.registers[self.rs]}"

    def str_as_dth(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rd]}, {mips.registers[self.rt]}, {mips.registers[self.sh]}"

    def str_as_s(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rs]}"

    def str_as_generic(self):
        _op = self.get_op()
        return f"{_op} \
                rs: {mips.registers[self.rs]}, \
                rt: {mips.registers[self.rt]}, \
                rd: {mips.registers[self.rd]}, \
                sh: {mips.registers[self.sh]}, \
                func: {mips.registers[self.func]}"

    def __str__(self):
        _op = self.get_op()
        subtype = mips.register_subtype.get(_op, "")
        if subtype == "dst":
            asm_str = self.str_as_dst()
        elif subtype == "st":
            asm_str = self.str_as_st()
        elif subtype == "d":
            asm_str = self.str_as_d()
        elif subtype == "dts":
            asm_str = self.str_as_dts()
        elif subtype == "dth":
            asm_str = self.str_as_dth()
        elif subtype == "ds":
            asm_str = self.str_as_s()
        else:
            asm_str = "INVALID"#self.str_as_generic()
        return asm_str

class ImmediateEncoding():
    def __init__(self, word):
        self.op = (word & PRIMARY_OPCODE_BITMASK) >> PRIMARY_OPCODE_START_BIT
        self.rs = (word & RS_BITMASK) >> RS_START_BIT
        self.rt = (word & RT_BITMASK) >> RT_START_BIT
        self.imm = (word & IMM_BITMASK) >> IMM_START_BIT

    def get_op(self):
        return mips.opcodes.get(self.op, None)

    def str_as_tsi(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rt]}, {mips.registers[self.rs]}, 0x{self.imm:04X}"

    def str_as_ti(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rt]}, {mips.registers[self.imm]}"

    def str_as_tis(self):
        _op = self.get_op()
        return f"{_op} {mips.registers[self.rt]}, 0x{self.imm:04X}({mips.registers[self.rs]})"

    def str_as_generic(self):
        _op = self.get_op()
        return f"{_op} \
                rs: {mips.registers[self.rs]}, \
                rt: {mips.registers[self.rt]}, \
                imm: {mips.registers[self.imm]}"

    def __str__(self):
        _op = self.get_op()
        subtype = mips.immediate_subtype[_op]
        if subtype == "tsi":
            asm_str = self.str_as_tsi()
        elif subtype == "ti":
            asm_str = self.str_as_ti()
        elif subtype == "tis":
            asm_str = self.str_as_tis()
        else:
            asm_str = self.str_as_generic()
        return asm_str


class JumpEncoding():
    def __init__(self, word, pc=0x0):
        self.op = (word & PRIMARY_OPCODE_BITMASK) >> PRIMARY_OPCODE_START_BIT
        self.pc = pc
        self.op = (word & PRIMARY_OPCODE_BITMASK) >> PRIMARY_OPCODE_START_BIT
        self.addr = (word & JUMP_ADDR_MASK) >> JUMP_ADDR_START_BIT

    def __str__(self):
        _op = mips.opcodes[self.op]
        _addr = self.addr << 2
        _pc = self.pc & 0xF0000000
        return f"{_op} 0x{(_addr + _pc):08X}"


# TODO(Lazy) This class is likely a placeholder for a subfile since it's (so far) stateless
class Disassembler():
    #def decode_register(word: int):
    # don't care about coprocessor (or unaligned loads/stores) right now
    # TODO(Lazy) If you care about the coprocessor, open a PR
    DONT_CARE_STRS = ["cop", "lwc", "swc", "n/a", "lwl", "lwr", "swl", "swr"]

    @staticmethod
    def to_asm(word: int) -> str:
        asm_str = ""

        opcode = (word & PRIMARY_OPCODE_BITMASK) >> PRIMARY_OPCODE_START_BIT
        # TODO(Lazy) this should be safer
        opcode_str = mips.opcodes[opcode]

        asm_str = "n/a"
        skip = False
        for dc in Disassembler.DONT_CARE_STRS:
            if dc in opcode_str:
                skip = True
        if not skip:
            encoding_type = mips.encoding_type[opcode_str]
        else:
            encoding_type = "n/a"

        #if encoding_type != "i":
        #    return "n/a"

        if encoding_type == "j":
            # TODO(Lazy) what about not immediates
            asm_str = f"{JumpEncoding(word)}"
        elif encoding_type == "r":
            # TODO(Lazy) what about not immediates
            asm_str = f"{RegisterEncoding(word)}"
        elif encoding_type == "i":
            # TODO(Lazy) what about not immediates
            asm_str = f"{ImmediateEncoding(word)}"
        elif encoding_type == "special":
            # all "special" encodings are really just variants of register
            asm_str = f"{RegisterEncoding(word)}"
        else:
            #TODO(Lazy) throw error or otherwise complain
            pass
        return asm_str

def main():
    #print(Disassembler.to_asm(0x0c00a955)) # jal     FUN_8002a554
    #print(Disassembler.to_asm(0x10400025)) # beq     v0,zero,LAB_8007b498
    #print(Disassembler.to_asm(0x3c158005)) # _lui    s5,0x8005
    #print(Disassembler.to_asm(0x3413d0ff)) # ori     s3,zero,0xd0ff
    #print(Disassembler.to_asm(0x241200ff)) # li      s2,0xff
    #print(Disassembler.to_asm(0x00481021)) # addu    v0,v0,t0

    #print(Disassembler.to_asm(0x00000001))
    #print(Disassembler.to_asm(0x02000000))
    #print(Disassembler.to_asm(0x20000000))
    #print(Disassembler.to_asm(0x3B000000))
    # TODO(Lazy) I should at least connect this to the opcode finder...
    #ops = [0x00, 0x03, 0x0C, 0x11, 0x20, 0x31, 0x32, 0x33, 0x34, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x6F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8,]
    #ops = [0x00, 0x03, 0x20, 0x31, 0x32, 0x33, 0x34, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x6F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x89, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8,]
    #ops = [ 0x00, 0x03, 0x11, 0x20, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x6F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x8A, 0x8B, 0x8C, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9A, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8]
    #ops = [ 0x00, 0x03, 0x11, 0x20, 0x30, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x6F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x8A, 0x8B, 0x8D, 0x8E, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBD, 0xBE, 0xBF, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE2, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8]
    ops = [0x00, 0x03, 0x11, 0x20, 0x30, 0x31, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x47, 0x48, 0x49, 0x4A, 0x4B, 0x4C, 0x4D, 0x4E, 0x4F, 0x50, 0x51, 0x52, 0x53, 0x54, 0x55, 0x56, 0x57, 0x58, 0x59, 0x5A, 0x6F, 0x80, 0x81, 0x82, 0x83, 0x84, 0x85, 0x86, 0x87, 0x88, 0x8A, 0x8B, 0x8D, 0x8F, 0x90, 0x91, 0x92, 0x93, 0x94, 0x95, 0x96, 0x97, 0x98, 0x99, 0x9B, 0x9C, 0x9D, 0x9E, 0x9F, 0xA0, 0xA1, 0xA2, 0xA3, 0xA4, 0xA5, 0xA6, 0xA7, 0xA8, 0xA9, 0xAA, 0xAB, 0xAC, 0xAD, 0xAE, 0xAF, 0xB0, 0xB1, 0xB3, 0xB4, 0xB5, 0xB6, 0xB7, 0xB8, 0xB9, 0xBA, 0xBB, 0xBD, 0xBE, 0xC0, 0xC1, 0xC2, 0xC3, 0xC4, 0xC5, 0xC6, 0xC7, 0xC8, 0xC9, 0xCA, 0xCB, 0xCC, 0xCD, 0xCE, 0xCF, 0xD0, 0xD1, 0xD2, 0xD3, 0xD4, 0xD5, 0xD6, 0xD7, 0xD8, 0xD9, 0xDA, 0xDB, 0xDC, 0xDD, 0xDE, 0xDF, 0xE0, 0xE1, 0xE3, 0xE4, 0xE5, 0xE6, 0xE7, 0xE8, 0xE9, 0xEA, 0xEB, 0xEC, 0xEF, 0xF0, 0xF1, 0xF2, 0xF3, 0xF4, 0xF5, 0xF6, 0xF7, 0xF8]
    for op in ops:
    #for op in [0x00, 0x03]:
        for b1 in ops:
            #op_str = f"{hex(op)} -> {Disassembler.to_asm(op << 24 | thing << b1)}"
            #word = op << 24 | b1
            word = op << 24 | b1 << 16
            op_str = f"0x{word:08X} -> {Disassembler.to_asm(word)}"
            #if "sll" in op_str:
            #    print(op_str)
            #if "n/a" not in op_str:
            #    print(op_str)
            if "lw" in op_str or "xor" in op_str or "add" in op_str or "sw" in op_str:
                print(op_str)
            #for b2 in ops:
            #    for b3 in ops:
            #        word = op << 24 | b1 << 16 | b2 << 8 | b3
            #        op_str = f"0x{word:08X} -> {Disassembler.to_asm(word)}"
            #        if "n/a" not in op_str:
            #            print(op_str)
            #        #if "add" in op_str and ", gp" in op_str:
            #        #if "addi" in op_str:
            #        #    print(op_str)


if __name__ == "__main__":
    main()